[
  {
    "path": "projects/2021-09-07-project-1/",
    "title": "Project 1",
    "description": "Understanding genres using Spotify audio features",
    "author": [
      {
        "name": "Stephanie Hicks",
        "url": "https://stephaniehicks.com/"
      }
    ],
    "date": "2021-09-07",
    "categories": [
      "project 1",
      "projects"
    ],
    "contents": "\n\nContents\nBackground\nTo submit your project\nInstall tidyverse\nData\n\nPart 1: Explore data\nPart 2: Convert nontidy data into tidy data\nTasks\nNotes\n\nPart 3: Data visualization\nTasks\nNotes\n\nPart 4: Make the worst plot you can!\nTasks\n\nPart 5: Make my plot a better plot!\nTasks\n\n\nBackground\nDue date: Sept 17 at 11:59pm\nTo submit your project\nPlease write up your project using R Markdown and knitr. Compile your document as an HTML file and submit your HTML file to the dropbox on Courseplus. Please show all your code for each of the answers to each part.\nTo get started, watch this video on setting up your R Markdown document.\nInstall tidyverse\nBefore attempting this assignment, you should first install the tidyverse package if you have not already. The tidyverse package is actually a collection of many packages that serves as a convenient way to install many packages without having to do them one by one. This can be done with the install.packages() function.\n\n\ninstall.packages(\"tidyverse\")\n\n\n\nRunning this function will install a host of other packages so it make take a minute or two depending on how fast your computer is. Once you have installed it, you will want to load the package.\n\n\nlibrary(tidyverse)\n\n\n\nFor all of the questions below, you can ignore the missing values in the dataset, so e.g. when taking averages, just remove the missing values before taking the average, if needed.\nData\nThat data for this part of the assignment comes from TidyTuesday, which is a weekly podcast and global community activity brought to you by the R4DS Online Learning Community. The goal of TidyTuesday is to help R learners learn in real-world contexts.\n\n\n\nFigure 1: Icon from TidyTuesday\n\n\n\n[Source: TidyTuesday]\nTo access the data, you need to install the tidytuesdayR R package and use the function tt_load() with the date of ‘2020-01-21’ to load the data.\n\n\ninstall.packages(\"tidytuesdayR\")\n\n\n\n\n\ntuesdata <- tidytuesdayR::tt_load('2020-01-21')\n\n\n\n    Downloading file 1 of 1: `spotify_songs.csv`\n\nspotify_songs <- tuesdata$spotify_songs\nglimpse(spotify_songs)\n\n\nRows: 32,833\nColumns: 23\n$ track_id                 <chr> \"6f807x0ima9a1j3VPbc7VN\", \"0r7CVbZT…\n$ track_name               <chr> \"I Don't Care (with Justin Bieber) …\n$ track_artist             <chr> \"Ed Sheeran\", \"Maroon 5\", \"Zara Lar…\n$ track_popularity         <dbl> 66, 67, 70, 60, 69, 67, 62, 69, 68,…\n$ track_album_id           <chr> \"2oCs0DGTsRO98Gh5ZSl2Cx\", \"63rPSO26…\n$ track_album_name         <chr> \"I Don't Care (with Justin Bieber) …\n$ track_album_release_date <chr> \"2019-06-14\", \"2019-12-13\", \"2019-0…\n$ playlist_name            <chr> \"Pop Remix\", \"Pop Remix\", \"Pop Remi…\n$ playlist_id              <chr> \"37i9dQZF1DXcZDD7cfEKhW\", \"37i9dQZF…\n$ playlist_genre           <chr> \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", …\n$ playlist_subgenre        <chr> \"dance pop\", \"dance pop\", \"dance po…\n$ danceability             <dbl> 0.748, 0.726, 0.675, 0.718, 0.650, …\n$ energy                   <dbl> 0.916, 0.815, 0.931, 0.930, 0.833, …\n$ key                      <dbl> 6, 11, 1, 7, 1, 8, 5, 4, 8, 2, 6, 8…\n$ loudness                 <dbl> -2.634, -4.969, -3.432, -3.778, -4.…\n$ mode                     <dbl> 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1,…\n$ speechiness              <dbl> 0.0583, 0.0373, 0.0742, 0.1020, 0.0…\n$ acousticness             <dbl> 0.10200, 0.07240, 0.07940, 0.02870,…\n$ instrumentalness         <dbl> 0.00e+00, 4.21e-03, 2.33e-05, 9.43e…\n$ liveness                 <dbl> 0.0653, 0.3570, 0.1100, 0.2040, 0.0…\n$ valence                  <dbl> 0.518, 0.693, 0.613, 0.277, 0.725, …\n$ tempo                    <dbl> 122.036, 99.972, 124.008, 121.956, …\n$ duration_ms              <dbl> 194754, 162600, 176616, 169093, 189…\n\nIf we look at the TidyTuesday github repo from 2020, we see this dataset contains songs from Spotify.\nHere is a data dictionary for what all the column names mean:\nhttps://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md#data-dictionary\nPart 1: Explore data\nIn this part, use functions from dplyr to answer the following questions.\nHow many songs are in each genre?\n\n\n# Add your solution here\n\n\n\n\nWhat is average value of energy and acousticness in the latin genre in this dataset?\n\n\n# Add your solution here\n\n\n\n\nCalculate the average duration of song (in minutes) across all subgenres. Which subgenre has the longest song on average?\n\n\n# Add your solution here\n\n\n\n\nMake two boxplots side-by-side of the danceability of songs stratifying by whether a song has a fast or slow tempo. Define fast tempo as any song that has a tempo above its median value. On average, which songs are more danceable?\nHint: You may find the case_when() function useful in this part, which can be used to map values from one variable to different values in a new variable (when used in a mutate() call).\n\n\n## Generate some random numbers\ndat <- tibble(x = rnorm(100))\nslice(dat, 1:3)\n\n\n# A tibble: 3 × 1\n       x\n   <dbl>\n1 -2.56 \n2 -0.184\n3  1.42 \n\n\n## Create a new column that indicates whether the value of 'x' is positive or negative\ndat %>%\n        mutate(is_positive = case_when(\n                x >= 0 ~ \"Yes\",\n                x < 0 ~ \"No\"\n        ))\n\n\n# A tibble: 100 × 2\n        x is_positive\n    <dbl> <chr>      \n 1 -2.56  No         \n 2 -0.184 No         \n 3  1.42  Yes        \n 4 -0.272 No         \n 5  1.36  Yes        \n 6 -0.246 No         \n 7  0.172 Yes        \n 8 -0.688 No         \n 9 -0.301 No         \n10  1.02  Yes        \n# … with 90 more rows\n\n\n\n# Add your solution here\n\n\n\n\nPart 2: Convert nontidy data into tidy data\nThe goal of this part of the assignment is to take a dataset that is either messy or simply not tidy and to make them tidy datasets. The objective is to gain some familiarity with the functions in the dplyr, tidyr packages. You may find it helpful to review the section on spreading and gathering data.\nTasks\nThis dataset gives a set of 12 audio features (e.g. acousticness, liveness, speechiness, etc) and descriptors like duration, tempo, key, and mode for a set of 32833 songs (in addition to the artist, album name, album release date, etc).\n\n\nspotify_songs\n\n\n# A tibble: 32,833 × 23\n   track_id  track_name   track_artist track_popularity track_album_id\n   <chr>     <chr>        <chr>                   <dbl> <chr>         \n 1 6f807x0i… I Don't Car… Ed Sheeran                 66 2oCs0DGTsRO98…\n 2 0r7CVbZT… Memories - … Maroon 5                   67 63rPSO264uRjW…\n 3 1z1Hg7Vb… All the Tim… Zara Larsson               70 1HoSmj2eLcsrR…\n 4 75Fpbthr… Call You Mi… The Chainsm…               60 1nqYsOef1yKKu…\n 5 1e8PAfcK… Someone You… Lewis Capal…               69 7m7vv9wlQ4i0L…\n 6 7fvUMiya… Beautiful P… Ed Sheeran                 67 2yiy9cd2QktrN…\n 7 2OAylPUD… Never Reall… Katy Perry                 62 7INHYSeusaFly…\n 8 6b1RNvAc… Post Malone… Sam Feldt                  69 6703SRPsLkS4b…\n 9 7bF6tCO3… Tough Love … Avicii                     68 7CvAfGvq4RlIw…\n10 1IXGILkP… If I Can't … Shawn Mendes               67 4QxzbfSsVryEQ…\n# … with 32,823 more rows, and 18 more variables:\n#   track_album_name <chr>, track_album_release_date <chr>,\n#   playlist_name <chr>, playlist_id <chr>, playlist_genre <chr>,\n#   playlist_subgenre <chr>, danceability <dbl>, energy <dbl>,\n#   key <dbl>, loudness <dbl>, mode <dbl>, speechiness <dbl>,\n#   acousticness <dbl>, instrumentalness <dbl>, liveness <dbl>,\n#   valence <dbl>, tempo <dbl>, duration_ms <dbl>\n\nUse the functions in dplyr, tidyr, and lubridate to perform the following steps to the spotify_songs dataset:\nSelect only unique distinct rows from the dataset based on the track_name and track_artist columns (Hint check out the distinct() function in dplyr).\nAdd a new column called year_released listing just the year that the song was released. (Hint check out the ymd() function in lubridate R package. Also, if you get a warning message with “failed to parse”, check out the truncated argument in the ymd() function.).\nKeep only songs that were released in or after 1980.\nAdd a new column with the duration of the song in minutes\nFor each year_released, calculate the mean of at least 6 of the audio features (e.g. danceability, energy, loudness, etc), or descriptors (e.g. tempo, duration in minutes, etc). (Hint: If all has gone well thus far, you should have a dataset with 41 rows and 7 columns).\nConvert this wide dataset into a long dataset with a new feature and mean_score column\nIt should look something like this:\nyear_released   feature   mean_score\n<dbl>           <chr>       <dbl>\n1980    Danceability    0.5633676       \n1980    Energy  0.7107647       \n1980    Loudness    -8.5211765      \n1980    Valence 0.6333235       \n1980    Tempo   124.1458529     \n1980    Duration    4.2853662       \n1981    Danceability    0.5697258       \n1981    Energy  0.6967581       \n1981    Loudness    -8.8678065      \n1981    Valence 0.6650968   \nNotes\nYou may need to use functions outside these packages to obtain this result.\nNote that the functions in the dplyr and tidyr package expect table-like objects (data frames or tibbles) as their input. You can convert data to these objects using the as_tibble() function in the tibble package.\nDo not worry about the ordering of the rows or columns. Depending on whether you use gather() or pivot_longer(), the order of your output may differ from what is printed above. As long as the result is a tidy data set, that is sufficient.\n\n\n# Add your solution here\n\n\n\n\nPart 3: Data visualization\nIn this part of the project, we will continue to work with our now tidy song dataset from the previous part.\nTasks\nUse the functions in ggplot2 package to make a scatter plot of the six (or more) mean_scores (y-axis) over time (x-axis). For full credit, your plot should include:\nAn overall title for the plot and a subtitle summarizing key trends that you found. Also include a caption in the figure with your name.\nBoth the observed points for the mean_score, but also a smoothed non-linear pattern of the trend\nAll six (or more) plots should be shown in the one figure\nThere should be an informative x-axis and y-axis label\nConsider playing around with the theme() function to make the figure shine, including playing with background colors, font, etc.\nNotes\nYou may need to use functions outside these packages to obtain this result.\nNote that the functions in the dplyr and tidyr package expect table-like objects (data frames or tibbles) as their input. You can convert data to these objects using the as_tibble() function in the tibble package.\nDon’t worry about the ordering of the rows or columns. Depending on whether you use gather() or pivot_longer(), the order of your output may differ from what is printed above. As long as the result is a tidy data set, that is sufficient.\n\n\n# Add your solution here\n\n\n\n\nPart 4: Make the worst plot you can!\nThis sounds a bit crazy I know, but I want this to try and be FUN! Instead of trying to make a “good” plot, I want you to explore your creative side and make a really awful data visualization in every way. :)\nTasks\nUsing the spotify_songs dataset (and it does not have to be the tidy dataset that we created in Part 2, it can be anything from the original dataset):\nMake the absolute worst plot that you can. You need to customize it in at least 7 ways to make it awful.\nIn your document, write 1 - 2 sentences about each different customization you added (using bullets – i.e. there should be at least 7 bullet points each with 1-2 sentences), and how it could be useful for you when you want to make an awesome data visualization.\n\n\n# Add your solution here\n\n\n\n\nPart 5: Make my plot a better plot!\nThe goal is to take my sad looking plot and make it better! If you’d like an example, here is a tweet I came across of someone who gave a talk about how to zhoosh up your ggplots.\n\n\nspotify_songs %>% \n  ggplot(aes(y=track_popularity, x=playlist_subgenre, fill = playlist_genre)) + \n  geom_violin() +\n  facet_wrap( ~ playlist_genre, scales = \"free_x\")\n\n\n\n\nTasks\nYou need to customize it in at least 7 ways to make it better.\nIn your document, write 1 - 2 sentences about each different customization you added (using bullets – i.e. there should be at least 7 bullet points each with 1-2 sentences), describing how you improved it.\n\n\n# Add your solution here\n\n\n\n\n\n\n\n",
    "preview": "https://github.com/rfordatascience/tidytuesday/raw/master/static/tt_logo.png",
    "last_modified": "2021-09-06T21:57:14-04:00",
    "input_file": {}
  },
  {
    "path": "projects/2021-08-31-project-0/",
    "title": "Project 0 (optional)",
    "description": "Information for Project 0 (entirely optional, but hopefully useful and fun!)",
    "author": [
      {
        "name": "Stephanie Hicks",
        "url": "https://stephaniehicks.com/"
      }
    ],
    "date": "2021-08-31",
    "categories": [
      "project 0",
      "projects"
    ],
    "contents": "\n\nContents\nBackground\nPart 1\nSetting up your computing environment\n\nPart 2\n1. Create a GitHub repo for your website\n2. Build a website using R Markdown\n3. Include a README.md file\n4. Deploy your website\n5. Share your website\n\n\nBackground\nDue date: Sept 9 at 1:29pm\nUsing the tools we learned in the first week (e.g. R, RStudio and Github). Let’s apply them in a small (but also comprehensive) exercise.\nPlease note this project is entirely optional (i.e. it will not be graded), but hopefully it will be helpful to you getting set up for the rest of the course (i.e. set up these tools on your computing environment) and give you an opportunity to introduce yourself to your classmates.\nFor anyone who completes it, you get a free hex sticker! If you aren’t familiar with the hex stickers, check out this link. You can add them to your laptop for some character and swag (or turn them into magnets). I have a ton of different ones from the tidyverse or RLadies Baltimore. You can come pick one up from my office or I can mail it to you if you email me a mailing address after you submit the project.\nFor those of you who are new to GitHub/R/Rmarkdown: this project makes you do a lot of things that you might not be familiar with. I know that this might be time-consuming and also might feel a bit intimidating. It’s partly unavoidable and partly on purpose. You need to learn how to quickly get up to speed with all kinds of new tools that come your way. So practicing it is a good idea. You are welcome to draw on any sources for help that you want (online, classmates, instructor, etc.). I’m confident with a bit of trial and error you’ll get it to work.\nPart 1\nThis part of the project is to ensure that you have successfully set up your computing environment. Please email (use the Subject line: 140.776 Setup) the Course Instructor (Dr. Stephanie Hicks) at shicks19@jhu.edu the following information:\nSetting up your computing environment\nYour name, JHED ID (if applicable).\nThe type of computer/operating system you are using (Windows, Mac, Unix/Linux, other)\nThe version of R that you have installed on your computer. To do this, start up R and run the following in the R console and include the output in your email.\n\n\nprint(R.version.string)\n\n\n\nPrinting the R version stringThe version of RStudio that you have installed on your computer. To do this start up RStudio and in the R console window, run the following and again include the output in your email:\n\n\nprint(RStudio.Version()$version)\n\n\n\nIf you have a GitHub username, please include this in your email. If you do not have a GitHub username, read https://happygitwithr.com, sign up for GitHub, and include your new username in your email to me.\nTo make sure git is installed on your system, use the ‘Terminal’ (e.g. it’s next to the R Console within RStudio) (or whatever you use), run the following and include the output in your email:\nFor example, this is mine:\n\ngit --version\ngit version 2.24.3 (Apple Git-128)\n\nIf you have any trouble with any of the steps above, try to first post on the discussion board on CoursePlus. The TAs and I will be checking it frequently, but other students may also be helpful in their replies. You can also use other resources to get help (Google, R4DS, colleagues/friends/relatives with R/Markdown experience, etc.). Still, try to do as much as possible yourself. We will use all the bits you are learning here repeatedly during this course.\nPart 2\nThis part of the project is to help you introduce yourself (and your interests!) to others in this course. You will create a new GitHub repository and build a small website about yourself.\n1. Create a GitHub repo for your website\nCreate a new GitHub repository titled biostat776-intro-<firstname>-<lastname> (where you replace <firstname> with your first name and <lastname> with your last name) in your own personal GitHub account (e.g. https://github.com/<yourgithubusername>/biostat776-intro-<firstname>-<lastname>).\nFor example, you can find an example that I created for myself at\ngithub repo: https://github.com/stephaniehicks/biostat776-intro-stephanie-hicks\n2. Build a website using R Markdown\nUsing one of the many ways we discussed in class (e.g. a simple R Markdown website, blogdown, distill, etc), create a new project in RStudio with the appropriate files. For example, you might include the following information:\nWrite a short summary introducing yourself. Structure the webpage with headings, subheadings, etc. Talk a bit about yourself, your background, training, research interests. Let me/us know what kind of statistics, programming, data analysis experience you already have. I am also curious to know what you most hope to learn in this course.\nFive fun facts about yourself\nA web page linking to something you think is really cool/interesting/inspiring/etc. You could also describe briefly what it is and why you like it.\nIf you want, feel free to get creative and include other things. You can play with RMarkdown if you wish to, e.g., you can try to include some table or a video, etc.\n3. Include a README.md file\nYour project repository should include a README.md file (if it was not included already).\nEdit the repository README.md file. Typically it will only contain the name of your repository with a # sign in front. The # represents a level 1 heading in Markdown. Change the headline and call it “Introducing myself” (or something like that). Underneath write something like “This website contains a short introduction of Your Name.”\nMake sure the 2 files (README.md and especially index.Rmd / index.html) look the way you want. Make changes until everything works.\n4. Deploy your website\nDepending on how you want to deploy your website, the following may or may not be relevant to you. In general, you want to make sure you have initialized your project to use git (i.e. you can type git init to initialize the repository to use git. Add and commit your changes. Push your changes and deploy your website.\nFollowing steps 2-4, here is my example website:\nwebsite: https://www.stephaniehicks.com/biostat776-intro-stephanie-hicks\n5. Share your website\nGo to the Discussion Board in CoursePlus and write a short post with a link (URL) to your website (and URL to the corresponding GitHub repository) that you created.\nAs you read the introductions from other folks in the class, feel free to comment/reply using Discussion board.\nIn class on Sept 9, I will show as many websites as I can from Courseplus!\n\n\n\n",
    "preview": {},
    "last_modified": "2021-08-26T23:32:27-04:00",
    "input_file": {}
  }
]
